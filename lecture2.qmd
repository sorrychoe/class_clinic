---
title: "Object-Oriented Programming 2"
format:
  revealjs: 
    theme: solarized
editor: visual
execute: 
  echo: true
  eval: true
---

## 목차

<br/>

::: incremental

-   oop를 하기 위해선 알아야 하는 것들?
-   oop의 핵심 개념들
-   Abstraction
-   Inhetritance
-   Polymorohism
-   Encapsulation
:::

## oop를 하기 위해서 알아야 하는 것들?

![](images\oop 조직도.png){.absolute top=100 left=250 width="600" height="650"}

## oop의 핵심 개념들

<br/>

::: incremental
-   Abstracition
-   Inheritance
-   Polymorphism
-   Encapsulation
:::

## oop의 핵심 개념들

<br/>

-   Abstracition --\> 추상화
-   Inheritance --\> 상속성, 재사용화
-   Polymorphism --\> 다형성
-   Encapsulation --\> 캡슐화

## Abstracition

**공통된 기능이나 속성을 묶어서 명명하는 것**

<br/>

::: {.fragment .fade-in}
-   객체 하나하나를 묶어서 하나의 객체로 묶는 과정을 추상화라고 함

ex) 아반떼, 소나타, 투싼이라는 클래스가 존재할 때, 이들을 하나의 클래스인 자동차로 정의하는 것!
:::

## Inheritance

**상위 개념의 특징을 하위 개념이 물려받는 것**

<br/>

::: {.fragment .fade-in}
-   부모 객체로부터 기능을 물려받는 것을 의미한다.

ex) 가솔린으로 움직이는 자동차라는 부모 클래스로부터 손님을 태우는 기능을 가진 택시라는 자녀 클래스를 생성하는 것!
:::

## Inheritance 예시

```{python, echo = TRUE}
class Car:
    def __init__(self, model, price, color):
        self.model = model
        self.price = price
        self.color = color

    def drive(self, speed):
        if speed > 100:
            return "속도 위반"
        else:
            return "안전 운전"

class Taxi(Car):
    def take_passengers(self, passengers):
        if passengers > 4:
            return "정원 초과"
        else:
            return "운전 가능"

taxi1 = Taxi("현대차", "3000만원", "Yellow")
print(taxi1.take_passengers(7)) 

print(taxi1.drive(120))
```

## Polymorohism

**부모 클래스에서 물려받은 가상 함수를 자녀 클래스 내에서 오버라이딩 되어 사용되는 것**

<br/>

::: {.fragment .fade-in}
-   부모 클래스에서 정의된 함수를 자녀 클래스에서도 사용하는 것!

ex) 자동차, 트럭, 레이스카 모두 움직이는 기능이 있기 때문에, 동일하게 움직일 수 있다!
:::

## Polymorohism 예시

```{python, echo = TRUE}
class Truck:
	def drive(self):
		print("트럭 운행 중")

	def stop(self):
		print("트럭 정지")


class Bus:
	def drive(self):
		print("버스 운행 중")

	def stop(self):
		print("버스 정지")


class Sport_car:
	def drive(self):
		print("스포츠카 운행 중")

	def stop(self):
		print("스포츠카 정지")


def drive_car(car):
	car.drive()


truck = Truck()
bus = Bus()
sport_car = Sport_car()

drive_car(truck)
drive_car(bus)
drive_car(sport_car)

```

## Encapsulation

**변수와 함수를 하나로 묶은 후, 실제 구현 내용의 일부를 외부에 감추는 것**

<br/>

::: {.fragment .fade-in}
-   객체의 속성과 기능을 하나로 묶는 것
-   추가로, 객체의 일부 구현 내용을 외부로부터 수정하지 못하도록 막는 것
:::

## Encapsulation 예제

<br/>

```{python, echo = TRUE}
class Mangling:

    def __init__(self, name, age):
        self.__set(name, age)

    def __set(self, name, age):
        self.__name = name
        self.__age = age

    def getname(self):
        return self.__name

    def getage(self):
        return self.__age
```
