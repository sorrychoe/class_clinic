---
title: "Object-Oriented Programming 1"
format: revealjs
editor: visual
execute: 
  echo: true
  eval: false
---

## 목차

<br/>

::: incremental
-   Object-Oriented Programming이란?
-   프로그래밍 3대 paradigm
-   Python에서 oop란?
-   oop의 핵심 개념 1 : object & class
-   oop의 핵심 개념 2 : Constructor
:::

## Object-Oriented Programming이란?

<br/>

::: {.fragment .fade-in-then-semi-out}
**Q. Object-Oriented Programming?**
:::

<br/>

<br/>

::: {.fragment .fade-in}
A. 쉽게 말해, 프로그램을 객체 단위로 잘게 쪼개서 프로그래밍하는 방법.
:::

## 프로그래밍 3대 Paradigm

<br/> 

<br/>

::: incremental
**1. 절차지향 프로그래밍**

**2. 객체지향 프로그래밍**

**3. 함수형 프로그래밍**
:::

## 프로그래밍 3대 Paradigm

<br/> 

<br/>

**1. 절차지향 프로그래밍** --\> Procedural Programming

**2. 객체지향 프로그래밍** --\> Object-Oriented Programming

**3. 함수형 프로그래밍** --\> Funtional Programming

## 절차지향 프로그래밍

**일이 진행되는 순서대로 프로그래밍하는 방법**

<br/>

::: {.fragment .fade-in}
*장점*

- 코드의 가독성이 좋음.
- 컴퓨터의 처리구조와 비슷해 실행 속도가 빠름.
:::

::: {.fragment .fade-in}
*단점*

- 각각의 코드가 순서에 민감하게 연결 되어있어, 유지보수 및 분석이 어려움.
:::

::: {.fragment .fade-up}
--\> 대표적인 언어 : C, Fortran
:::

## 객체지향 프로그래밍

**객체 단위로 쪼개서 프로그래밍하는 방법**

<br/>

::: {.fragment .fade-in}
*장점*

- 코드의 재사용이 가능.(확장, 유지보수에 용이!)
- 분석과 설계의 전환이 쉬움.
:::

::: {.fragment .fade-in}
*단점*

- 처리 속도가 상대적으로 다소 느림.
- 설계에 많은 시간이 소요됨.
:::

::: {.fragment .fade-up}
--\> 대표적인 언어 : JAVA, C++, C#
:::

## 함수형 프로그래밍

**순수 함수를 사용해, 빨리 처리하는데 초점을 둔 방법**

<br/>

::: {.fragment .fade-in}
*장점* 

- 함수의 동작부가 간결해지기 때문에, 객체지향 프로그래밍에 비해 코드 이해도와 가독성이 좋아짐.
- 테스트가 쉬움.
:::

::: {.fragment .fade-in}
*단점*

- 외부 데이터 혹은 내부 데이터의 상태를 조작할 수 없음.
:::

::: {.fragment .fade-up}
--\> 대표적인 언어 : Haskell, OCaml
:::

## Why are we code through Object-Oriented Programming?

<br/>

::: {.fragment .fade-in}
-   현대 사회에 들어서 더 복잡한 어플리케이션에 대한 수요가 증가
-   But, 기존의 절차지향형 프로그래밍 만으로는 현대 사회에서 요구하는 프로그램 제작에 어려움이 있음
-   이를 보완하기 위해, '실제 세계와 비슷한 방법의 모델링'이 필요해짐
:::

::: {.fragment .fade-up}
-   그것이 바로 **객체지향형 프로그래밍(Object-Oriented Programming)!**
:::


## Python에서 OOP란?

<br/>

::: {.fragment .fade-in}
Q. Python에서 어떻게 객체지향 프로그래밍을 구현할 수 있나요? 
:::

<br/>

:::{.fragment .fade-up}
A. 그거슨 바로 class!
:::


## Python에서의 Class 구조

``` {.py code-line-numbers="1|2-3|4-5"}
class name:
  def __init__(self): 
    ....
  def func(self):
    ....
```

## oop의 핵심 개념 1 : object & class

<br/>

:::{.fragment .fade-up}
```{python}
class name:
  def ...():

```

:::

## oop의 핵심 개념 2 : Constructor

<br/>

:::{.fragment .fade-up}
``` {.py code-line-numbers="1|2-3"}
class name:
  def __init__(self): 
    ....
```

:::